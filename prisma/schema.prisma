generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id          Int             @id @default(autoincrement())
  email       String          @unique
  role        Int             @default(0)
  password    String
  salt        String
  name        String? 
  loginToken  String?         @unique
  completedWorkouts CompletedWorkout[]  // Relation to CompletedWorkout
}

model Exercise {
  id          Int          @id @default(autoincrement())
  name        String
  description String
  image       String
  workouts    WorkoutExercise[]
}

model Workout {
  id          Int          @id @default(autoincrement())
  name        String
  description String
  image       String?
  exercises   WorkoutExercise[]
  completedWorkouts CompletedWorkout[]  // Relation to CompletedWorkout
}

model WorkoutExercise {
  workoutId   Int
  exerciseId  Int
  reps        Int
  order       Int

  workout     Workout      @relation(fields: [workoutId], references: [id], onDelete: Cascade) // Cascade on delete
  exercise    Exercise     @relation(fields: [exerciseId], references: [id], onDelete: Cascade) // Cascade on delete

  @@unique([workoutId, order]) // Unique ordering for exercises within a workout
}

model CompletedWorkout {
  id          Int       @id @default(autoincrement())
  userId      Int
  workoutId   Int
  duration    Int?      // Duration in seconds
  completedAt DateTime  @default(now())

  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade) // Cascade on delete
  workout     Workout   @relation(fields: [workoutId], references: [id], onDelete: Cascade) // Cascade on delete
}